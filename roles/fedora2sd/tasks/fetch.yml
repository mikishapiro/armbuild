---
- name: make sure workpath exists
  file:
    name: "{{ workpath }}"
    mode: 0640
    state: directory

- name: set a variable to contain the escaped octal value of doublequotes
  set_fact:
    dq: \42

- name: "Find the real URL or output string notredirect"
  shell: "set -o pipefail ; curl {{ requested_url }} --max-time 5 --max-redirs 0 --silent |grep moved > /dev/null && curl {{ requested_url }} --max-redirs 0 --silent |grep moved|cut -d$'{{ dq }}' -f2 || echo notredirect"
  args:
    warn: false
  register: redcheck
  when:
    - deref

- name: "If deref is on and redirect URL is good, use it"
  set_fact:
    url: "{{ redcheck.stdout_lines.0 }}"
  when:
    - redcheck.stdout_lines.0 != "notredirect"
    - deref

- name: "If deref on and redirect bad or if deref is off, use literal requested URL {{ requested_url }}"
  set_fact:
    url: "{{ requested_url }}"
  when:
    - ( deref and redcheck.stdout_lines.0 == "notredirect" ) or not deref

- name: "Setting redcheck.stdout_lines.0 to notredirect or the actual url"
  shell: "set -o pipefail ; curl {{ requested_checksum_url }} --max-time 5 --max-redirs 0 --silent |grep moved > /dev/null && curl {{ requested_url }} --max-redirs 0 --silent |grep moved|cut -d$'{{ dq }}' -f2 || echo notredirect"
  args:
    warn: false
  register: redcheck
  when:
    - deref

- name: "If deref is on and redirect URL is good, use it"
  set_fact:
    url: "{{ redcheck.stdout_lines.0 }}"
  when:
    - redcheck.stdout_lines.0 != "notredirect"
    - deref

- name: "If deref on and redirect bad or if deref is off, use literal requested URL {{ requested_checksum_url }}"
  set_fact:
    urlchecksum: "{{ requested_checksum_url }}"
  when:
    - ( deref and redcheck.stdout_lines.0 == "notredirect" ) or not deref

- name: "Download the image checksum from {{ urlchecksum }}"
  get_url:
    url: "{{ urlchecksum }}"
    dest: "{{ workpath }}/{{ urlchecksum | basename }}"
  register: download

- name: "Get the content of {{ workpath }}/{{ urlchecksum | basename }}"
  slurp:
    src: "{{ workpath }}/{{ urlchecksum | basename }}"
  register: image_checksum_b64

- name: Get the actual checksum
  set_fact:
    image_checksum: "{{ image_checksum_b64.content | b64decode | regex_search('[0-9a-f]{64}') }}"

- name: "Download the image from {{ url }}"
  get_url:
    url: "{{ url }}"
    dest: "{{ workpath }}/{{ url | basename }}"
    checksum: 'sha256:{{ image_checksum }}'
  register: download

- name: Set the name of the file that just got extracted
  set_fact:
    extractedfile: "{{ download.dest | regex_replace('.xz') | regex_replace('.zip', '.img') }}"

- name: "Ensure that {{ extractedfile }} exists"
  stat:
    path: "{{ extractedfile }}"
  register: raw_image_stat_result

- name: Extract xz archives when they are not yet extracted
  command: "unxz -fk {{ download.dest }}"
  when:
    - download.dest is search("xz")
    - not raw_image_stat_result.stat.exists

- name: Extract xz archives when something named like their content is there
  command: "unxz -fk {{ download.dest }}"
  when:
    - not download.dest.find("zip")
    - raw_image_stat_result.stat.exists
    - not lazy|bool

- name: Extract zip archives
  unarchive:
    src: "{{ download.dest }}"
    remote_src: true
    dest: "{{ workpath }}"
    keep_newer: true
    mode: 0640
  when: download.dest is search("zip")
...
